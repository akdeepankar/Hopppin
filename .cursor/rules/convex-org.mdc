---
description: Organization functionality using Better Auth organization plugin with Convex integration
globs: convex/org*.ts,convex/organization*.ts
alwaysApply: false
---

# Convex Organizations with Better Auth

## Architecture

**Multi-tenant System:** Organizations → Members → Teams with role-based access control
**Schema:** Better Auth tables (organization, member, invitation, team) + App integration via `userId`

## API Method Reference

### Critical Distinctions

| Feature               | Server-Side (`auth.api.*`)                         | Client-Side (`authClient.organization.*`) |
| --------------------- | -------------------------------------------------- | ----------------------------------------- |
| **Send Invitation**   | `createInvitation`                                 | `inviteMember`                            |
| **Get Active Org**    | Custom Convex function using `getFullOrganization` | `useActiveOrganization` (hook)            |
| **List Members**      | Returns `{ members: [...], total: number }` object | Returns array directly                    |
| **Accept Invitation** | `acceptInvitation`                                 | `acceptInvitation`                        |
| **Check Permissions** | `hasPermission`                                    | `hasPermission` or `checkRolePermission`  |

### Server-Only Methods (auth.api.\*)

- `createOrganization`, `updateOrganization`, `deleteOrganization`
- `checkOrganizationSlug`, `setActiveOrganization`
- `createInvitation` (NOT inviteMember!)
- `acceptInvitation`, `rejectInvitation`, `cancelInvitation`
- `listInvitations`, `listUserInvitations`
- `listMembers` (returns `{ members: [...], total: number }`)
- `addMember`, `removeMember`, `updateMemberRole`
- `getActiveMember`, `getFullOrganization`
- Teams: `createTeam`, `updateTeam`, `removeTeam`, etc.

### Client-Only Methods (authClient.organization.\*)

- `create`, `update`, `delete`
- `inviteMember` (NOT createInvitation!)
- `checkSlug`, `setActive`
- `useActiveOrganization`, `useListOrganizations` (hooks)
- `checkRolePermission` (client-side permission check)

## Setup

**Edit:** `convex/auth.ts` - Add `organization()` plugin  
**Edit:** `src/lib/auth-client.ts` - Add `organizationClient()` plugin  
**Edit:** `convex/schema.ts` - Add organization fields to session

```typescript
// convex/auth.ts
import { organization } from 'better-auth/plugins';

export const auth = betterAuth({
  plugins: [
    convex(),
    organization({
      allowUserToCreateOrganization: true, // or custom function
      organizationLimit: 5,
      membershipLimit: 100,
      creatorRole: 'owner',
      invitationExpiresIn: 48 * 60 * 60, // 48 hours
      teams: {
        enabled: true,
        maximumTeams: 10,
        allowRemovingAllTeams: false,
      },
      sendInvitationEmail: async (data) => {
        const inviteLink = `${process.env.NEXT_PUBLIC_SITE_URL}/accept-invitation/${data.id}`;
        await sendEmail({
          to: data.email,
          subject: `Invitation to ${data.organization.name}`,
          template: 'organization-invite',
          data: { inviteLink, ...data },
        });
      },
    }),
  ],
});

// src/lib/auth-client.ts
import { organizationClient } from 'better-auth/client/plugins';
import { ac, roles } from '@/lib/permissions';

export const authClient = createAuthClient({
  plugins: [
    organizationClient({
      ac,
      roles,
      teams: { enabled: true },
    }),
  ],
});
```

## Server-Side Organization API Pattern

**Edit:** `convex/organization.ts`

**Important API Distinctions:**

- **Server-side invitation:** `auth.api.createInvitation` (use in Convex functions)
- **Client-side invitation:** `authClient.organization.inviteMember` (use in React components)
- **getActiveOrganization:** Custom Convex function (not a Better Auth API)
- **listMembers response:** Returns `{ members: [...], total: number }` object, not just array

```typescript
// ALL Better Auth organization APIs available server-side via auth.api
export const orgOperation = createAuthMutation()({
  handler: async (ctx, args) => {
    const auth = createAuth(ctx);
    const headers = await betterAuthComponent.getHeaders(ctx);

    // Access ANY Better Auth organization method
    await auth.api.createOrganization({ body: { name, slug }, headers });
    await auth.api.createInvitation({ body: { email, role }, headers }); // Server-side invitation
    await auth.api.updateMemberRole({ body: { memberId, role }, headers });
    // ... all auth.api.* organization methods available
    // Note: inviteMember is CLIENT-SIDE ONLY (authClient.organization.inviteMember)
  },
});
```

## Organization Management

### Create Organization

```typescript
// Server-side
export const createOrg = createAuthMutation({
  rateLimit: 'org/create',
})({
  args: {
    name: z.string().min(1).max(100),
    slug: z.string().regex(/^[a-z0-9-]+$/),
    logo: z.string().url().optional(),
    metadata: z.record(z.any()).optional(),
  },
  returns: zid('organizations'),
  handler: async (ctx, args) => {
    const auth = createAuth(ctx);
    const headers = await betterAuthComponent.getHeaders(ctx);

    // Check slug availability
    const slugTaken = await auth.api.checkOrganizationSlug({
      body: { slug: args.slug },
      headers,
    });
    if (slugTaken) {
      throw new ConvexError({
        code: 'CONFLICT',
        message: 'Slug already taken',
      });
    }

    const org = await auth.api.createOrganization({
      body: {
        name: args.name,
        slug: args.slug,
        logo: args.logo,
        metadata: args.metadata,
      },
      headers,
    });

    // Create app-specific organization data if needed
    return org.id;
  },
});

// Client-side
await authClient.organization.create({
  name: 'My Organization',
  slug: 'my-org',
  logo: 'https://example.com/logo.png',
});

// Check slug availability
const available = await authClient.organization.checkSlug({ slug: 'my-org' });
```

### Active Organization

```typescript
// Set active organization (server)
await auth.api.setActiveOrganization({
  body: { organizationId },
  headers,
});

// Get active organization - custom Convex function (not a Better Auth API)
// Gets activeOrgId from session and calls getFullOrganization
const activeOrg = await getActiveOrganization(ctx);

// Get active organization (client)
const { data: activeOrg } = authClient.useActiveOrganization();

// List user's organizations (client)
const { data: orgs } = authClient.useListOrganizations();
```

### Update & Delete Organization

```typescript
// Update organization
await auth.api.updateOrganization({
  body: {
    organizationId,
    data: { name, slug, logo, metadata },
  },
  headers,
});

// Delete organization (owner only)
await auth.api.deleteOrganization({
  body: { organizationId },
  headers,
});
```

## Invitation System

### Send Invitation

```typescript
// Server-side: Use createInvitation
export const inviteMember = createAuthMutation({
  rateLimit: 'org/invite',
})({
  args: {
    email: z.string().email(),
    role: z.enum(['owner', 'admin', 'member']),
    organizationId: zid('organizations').optional(),
    teamId: zid('teams').optional(),
    resend: z.boolean().optional(),
  },
  handler: async (ctx, args) => {
    const auth = createAuth(ctx);
    const headers = await betterAuthComponent.getHeaders(ctx);

    // SERVER-SIDE: auth.api.createInvitation
    await auth.api.createInvitation({
      body: {
        email: args.email,
        role: args.role,
        organizationId: args.organizationId,
        teamId: args.teamId,
        resend: args.resend,
      },
      headers,
    });
  },
});

// CLIENT-SIDE: authClient.organization.inviteMember
await authClient.organization.inviteMember({
  email: 'user@example.com',
  role: 'member',
  organizationId: 'org-id', // optional
});
```

### Accept/Reject Invitation

```typescript
// Accept invitation
await auth.api.acceptInvitation({
  body: { invitationId },
  headers,
});

// Reject invitation
await auth.api.rejectInvitation({
  body: { invitationId },
  headers,
});

// Cancel invitation (inviter)
await auth.api.cancelInvitation({
  body: { invitationId },
  headers,
});

// List invitations
const invitations = await auth.api.listInvitations({
  query: { organizationId },
  headers,
});

// List user invitations
const userInvites = await auth.api.listUserInvitations({
  query: { email },
  headers,
});
```

## Member Management

### List & Manage Members

```typescript
// List members
export const listOrgMembers = createAuthQuery()({
  args: {
    organizationId: z.string().optional(),
  },
  handler: async (ctx, args) => {
    const auth = createAuth(ctx);
    const headers = await betterAuthComponent.getHeaders(ctx);

    // listMembers returns { members: [...], total: number }
    const response = await auth.api.listMembers({
      query: {
        organizationId: args.organizationId,
        limit: 100,
        sortBy: 'createdAt',
        sortDirection: 'desc',
      },
      headers,
    });

    // Access members array from response object
    const members = response?.members || [];

    // Enrich with app user data
    return enrichMembersWithUserData(ctx, members);
  },
});

// Update member role
await auth.api.updateMemberRole({
  body: { memberId, role: 'admin' }, // Single role string, not array
  headers,
});

// Remove member
await auth.api.removeMember({
  body: { memberIdOrEmail, organizationId },
  headers,
});

// Add member directly (server-only)
await auth.api.addMember({
  body: { userId, role: 'member', organizationId },
  headers,
});

// Leave organization
await auth.api.leaveOrganization({
  body: { organizationId },
  headers,
});

// Get active member
const member = await auth.api.getActiveMember({ headers });
```

## Access Control

### Define Permissions

```typescript
// lib/permissions.ts
import { createAccessControl } from 'better-auth/plugins/access';
import {
  defaultStatements,
  ownerAc,
  adminAc,
} from 'better-auth/plugins/organization/access';

const statement = {
  ...defaultStatements,
  project: ['create', 'update', 'delete', 'share'],
  billing: ['view', 'manage'],
  analytics: ['view', 'export'],
} as const;

export const ac = createAccessControl(statement);

export const owner = ac.newRole({
  ...ownerAc.statements,
  project: ['create', 'update', 'delete', 'share'],
  billing: ['view', 'manage'],
  analytics: ['view', 'export'],
});

export const admin = ac.newRole({
  ...adminAc.statements,
  project: ['create', 'update'],
  analytics: ['view', 'export'],
});

export const member = ac.newRole({
  project: ['create'],
  analytics: ['view'],
});

export const roles = { owner, admin, member };
```

### Check Permissions

```typescript
// Server-side permission check
const hasPermission = await auth.api.hasPermission({
  body: {
    permissions: {
      project: ['delete'],
      billing: ['manage'],
    },
  },
  headers,
});

// Client-side permission check
const canDelete = await authClient.organization.hasPermission({
  permissions: { project: ['delete'] },
});

// Check role permission (client-only)
const canManage = authClient.organization.checkRolePermission({
  permissions: { billing: ['manage'] },
  role: 'admin',
});
```

## Teams

### Team Management

```typescript
// Create team
await auth.api.createTeam({
  body: { name: 'Engineering', organizationId },
  headers,
});

// List teams
const teams = await auth.api.listTeams({
  query: { organizationId },
  headers,
});

// Update team
await auth.api.updateTeam({
  body: { teamId, data: { name: 'New Name' } },
  headers,
});

// Remove team
await auth.api.removeTeam({
  body: { teamId, organizationId },
  headers,
});

// Set active team
await auth.api.setActiveTeam({
  body: { teamId },
  headers,
});
```

### Team Members

```typescript
// List team members
const members = await auth.api.listTeamMembers({
  body: { teamId },
  headers,
});

// Add team member
await auth.api.addTeamMember({
  body: { teamId, userId },
  headers,
});

// Remove team member
await auth.api.removeTeamMember({
  body: { teamId, userId },
  headers,
});

// List user teams
const userTeams = await auth.api.listUserTeams({ headers });
```

## Hooks & Customization

### Organization Creation Hooks

```typescript
// convex/auth.ts
organization({
  organizationCreation: {
    beforeCreate: async ({ organization, user }, request) => {
      // Validate or modify organization data
      return {
        data: {
          ...organization,
          metadata: { plan: 'free', customField: 'value' },
        },
      };
    },
    afterCreate: async ({ organization, member, user }, request) => {
      // Setup default resources
      await setupDefaultProjects(organization.id);
      await sendWelcomeEmail(user.email, organization.name);
    },
  },
  organizationDeletion: {
    beforeDelete: async (data, request) => {
      // Backup or validate deletion
    },
    afterDelete: async (data, request) => {
      // Cleanup related resources
    },
  },
});
```

## Client Integration

### React Hooks

```typescript
// Active organization
const { data: activeOrg } = authClient.useActiveOrganization();

// List organizations
const { data: orgs } = authClient.useListOrganizations();

// Custom hooks
export const useIsOwner = () => {
  const { data: member } = authClient.organization.getActiveMember();
  return member?.role === 'owner';
};

export const useCanManage = (resource: string) => {
  const [canManage, setCanManage] = useState(false);

  useEffect(() => {
    authClient.organization
      .hasPermission({ permissions: { [resource]: ['manage'] } })
      .then(setCanManage);
  }, [resource]);

  return canManage;
};
```

## Common Patterns

### Organization Context Provider

```typescript
// providers/organization-provider.tsx
export const OrganizationProvider = ({ children }) => {
  const { data: activeOrg } = authClient.useActiveOrganization();
  const { data: member } = authClient.organization.getActiveMember();

  return (
    <OrganizationContext.Provider value={{ activeOrg, member }}>
      {children}
    </OrganizationContext.Provider>
  );
};
```

### Organization Guard

```typescript
// Server-side guard (RSC)
export const organizationGuard = async (requiredRole?: string) => {
  const auth = createAuth(ctx);
  const headers = await betterAuthComponent.getHeaders(ctx);
  const member = await auth.api.getActiveMember({ headers });

  if (!member) {
    redirect('/select-organization');
  }

  if (requiredRole && member.role !== requiredRole) {
    notFound();
  }

  return member;
};

// Client-side guard
export const useOrganizationGuard = (requiredRole?: string) => {
  const { data: member } = authClient.organization.getActiveMember();
  const router = useRouter();

  useEffect(() => {
    if (!member) {
      router.push('/select-organization');
    } else if (requiredRole && member.role !== requiredRole) {
      router.push('/unauthorized');
    }
  }, [member, requiredRole]);

  return member;
};
```

## Schema

### Better Auth Component Tables

The organization plugin creates tables managed by the Better Auth Convex component that **cannot be extended directly**:

```typescript
// Organization tables (from Better Auth component):
organization: defineTable({
  createdAt: v.float64(),
  logo: v.optional(v.union(v.null(), v.string())),
  metadata: v.optional(v.union(v.null(), v.string())),
  name: v.string(),
  slug: v.optional(v.union(v.null(), v.string())),
})
  .index('name', ['name'])
  .index('slug', ['slug']),

member: defineTable({
  createdAt: v.float64(),
  organizationId: v.string(),
  role: v.string(),
  userId: v.string(),
})
  .index('organizationId_userId', ['organizationId', 'userId'])
  .index('role', ['role'])
  .index('userId', ['userId']),

invitation: defineTable({
  email: v.string(),
  expiresAt: v.float64(),
  inviterId: v.string(),
  organizationId: v.string(),
  role: v.optional(v.union(v.null(), v.string())),
  status: v.string(),
  teamId: v.optional(v.union(v.null(), v.string())),
})
  .index('email_organizationId_status', ['email', 'organizationId', 'status'])
  .index('inviterId', ['inviterId'])
  .index('organizationId_status', ['organizationId', 'status'])
  .index('role', ['role'])
  .index('status', ['status'])
  .index('teamId', ['teamId']),

team: defineTable({
  createdAt: v.float64(),
  name: v.string(),
  organizationId: v.string(),
  updatedAt: v.optional(v.union(v.null(), v.float64())),
}).index('organizationId', ['organizationId']),

teamMember: defineTable({
  createdAt: v.optional(v.union(v.null(), v.float64())),
  teamId: v.string(),
  userId: v.string(),
}).index('userId', ['userId']),

// Session table extensions for organization:
session: defineTable({
  // ... existing session fields ...
  activeOrganizationId: v.optional(v.union(v.null(), v.string())),
  activeTeamId: v.optional(v.union(v.null(), v.string())),
  // ... other fields ...
})
```

### Extending with Linked Tables

To add custom fields, create linked tables in your app schema:

```typescript
// convex/schema.ts
organizationExtensions: defineEnt({
  plan: v.string(),
  customerId: v.optional(v.string()),
  credits: v.number(),
  // ... your custom fields
})
  .field('organizationId', v.string(), { unique: true }) // Link to Better Auth organization
  .index('organizationId', ['organizationId']),

memberExtensions: defineEnt({
  department: v.optional(v.string()),
  title: v.optional(v.string()),
  // ... your custom fields
})
  .field('memberId', v.string(), { unique: true }) // Link to Better Auth member
  .index('memberId', ['memberId']),
```

### Working with Linked Data

```typescript
// After creating organization, create extension
export const createOrgWithExtensions = createAuthMutation()({
  handler: async (ctx, args) => {
    const auth = createAuth(ctx);
    const headers = await betterAuthComponent.getHeaders(ctx);

    // Create organization via Better Auth
    const org = await auth.api.createOrganization({
      body: { name: args.name, slug: args.slug },
      headers,
    });

    // Create linked extension record
    await ctx.table('organizationExtensions').insert({
      organizationId: org.id,
      plan: 'free',
      credits: 100,
    });

    return org.id;
  },
});

// Query organization with extensions
export const getOrgWithExtensions = createAuthQuery()({
  args: { organizationId: z.string() },
  handler: async (ctx, args) => {
    const auth = createAuth(ctx);
    const headers = await betterAuthComponent.getHeaders(ctx);

    const [org, extensions] = await Promise.all([
      auth.api.getFullOrganization({
        query: { organizationId: args.organizationId },
        headers,
      }),
      ctx
        .table('organizationExtensions')
        .get('organizationId', args.organizationId),
    ]);

    return { ...org, ...extensions };
  },
});
```

### Custom Additional Fields (Client-side)

While you can't extend the Better Auth tables directly, you can configure additional fields that Better Auth will accept:

```typescript
// convex/auth.ts
organization({
  schema: {
    organization: {
      additionalFields: {
        // These are accepted by Better Auth but stored as JSON in metadata field
        plan: { type: 'string', input: true, required: false },
        customerId: { type: 'string', input: false, required: false },
      },
    },
  },
});

// src/lib/auth-client.ts - Type inference for client
import { inferOrgAdditionalFields } from 'better-auth/client/plugins';
import type { auth } from '@/auth';

export const authClient = createAuthClient({
  plugins: [
    organizationClient({
      schema: inferOrgAdditionalFields<typeof auth>(),
    }),
  ],
});
```
