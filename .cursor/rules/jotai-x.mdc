---
description: 
globs: *.tsx
alwaysApply: false
---
# Jotai X State Management

<version>1.0.0</version>

## Context
- When implementing state management with Jotai
- When creating or modifying atom stores
- When accessing state in React components

## Requirements
- Use `createAtomStore` to define state with type-safe hooks
- Follow the naming convention `use<StoreName>Value`, `use<StoreName>Store`, etc.
- Use the appropriate hook for each use case:
  - `use<StoreName>Value(key)` for reading values
  - `use<StoreName>Store().set(key, value)` for writing values
  - `use<StoreName>State(key)` for both reading and writing
- Use the `extend` option for derived atoms
- Use scoped providers when needed for nested state
- Use `initialValues` for hydration and dynamic values for controlled state

## Examples
<example>
// Creating a store with type-safe hooks
const { useAppStore, useAppValue, useAppSet, useAppState, AppProvider } =
  createAtomStore(
    {
      name: 'JotaiX',
      stars: 0,
    },
    {
      name: 'app',
    }
  );

// Reading values
const name = useAppValue('name');

// Writing values
const store = useAppStore();
store.set('stars', (s) => s + 1);

// Both reading and writing
const [name, setName] = useAppState('name');
</example>

<example type="invalid">
// Don't create atoms manually when using Jotai X
const nameAtom = atom('JotaiX');
const starsAtom = atom(0);

// Don't use raw Jotai hooks directly
const name = useAtomValue(nameAtom);
const setStars = useSetAtom(starsAtom);
</example>

## Derived Atoms
<example>
// Using extend for derived atoms
const { useUserValue } = createAtomStore(
  {
    name: 'Alice',
  },
  {
    name: 'user',
    extend: (atoms) => ({
      intro: atom((get) => `My name is ${get(atoms.name)}`),
    }),
  }
);

// Accessing derived values
const intro = useUserValue('intro');
</example>

## Provider Usage
<example>
// Using the provider with initial values and controlled state
<UserProvider
  initialValues={{
    name: 'Alice',
    email: 'alice@example.com'
  }}
  name="Bob"
  scope="user1"
>
  <UserProfile />
</UserProvider>
</example>

# Global App Store Usage

## Context
- When state needs to be shared across multiple pages (AppProvider is rendered at layout level)
- When state needs to persist between sessions
- When prop drilling would make component hierarchy complex

## Requirements
- Import `useAppStore` from the app provider
- Use the appropriate hook method for each use case:
  - `useAppStore().use<Key>Value()` for reading values
  - `useAppStore().useSet<Key>()` for writing values
  - `useAppStore().use<Key>State()` for both reading and writing
- Add new values to the store by updating the object in `createAtomStore`
- Use `atomWithCookie` for values that should persist between sessions

## Examples
<example>
// Importing the app store hook
import { useAppStore } from '@/components/providers/app-provider';

// Reading values
const count = useAppStore().useCountValue();

// Writing values
const setCount = useAppStore().useSetCount();
setCount(count + 1);

// Both reading and writing
const [count, setCount] = useAppStore().useCountState();
</example>

<example type="invalid">
// Don't use local state for values that should be shared
const [count, setCount] = useState(0);

// Don't pass shared state through multiple levels of props
<Parent count={count} setCount={setCount}>
  <Child count={count} setCount={setCount}>
    <GrandChild count={count} setCount={setCount} />
  </Child>
</Parent>
</example>

## Adding New Values
<example>
// Adding new values to the store
export const { AppProvider, useAppStore } = createAtomStore(
  {
    count: 0,
    theme: 'light',
    user: { name: '', email: '' },
    // Persisted value
    preferences: atomWithCookie('userPrefs', { notifications: true }),
  },
  {
    name: 'app',
  }
);
</example>

## Provider Usage
<example>
// Wrapping the application with the provider
function App() {
  return (
    <AppProvider initialValues={{ count: 0, theme: 'dark' }}>
      <YourApp />
    </AppProvider>
  );
}
</example>