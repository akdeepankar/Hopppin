---
description: Convex client-side integration patterns for Next.js applications
globs: src/**/*.tsx,src/**/*.ts
alwaysApply: false
---

# Convex Client Integration

## Context

Read the files you need in:

- convex/schema.ts - Database schema for type references
- .cursor/rules/convex.mdc - Backend patterns and full examples
- src/lib/convex/hooks.ts - Custom React hooks
- src/lib/convex/server.ts - Server-side utilities
- src/lib/convex/rsc.tsx - RSC guards
- @convex/\_generated/api.d.ts - Generated API types
- @convex/\_generated/dataModel.d.ts - Generated data model types

## Import Guidelines

**From Next.js (`src/`):**

```typescript
import { api, internal } from '@convex/_generated/api';
import { Id, Doc } from '@convex/_generated/dataModel';
import type { Ent, EntWriter } from '@convex/shared/types'; // Ent types
```

## React Integration

### Query Hooks

```typescript
import { usePublicQuery, useAuthQuery } from '@/lib/convex/hooks';

// Public query (auth optional) - ALWAYS pass {} for no args
const { data, isPending } = usePublicQuery(api.items.list, {}); // ALWAYS pass {} for no args
const { data: profile } = useAuthQuery(api.user.getProfile, {}); // Skips if not authenticated
const { data } = usePublicQuery(api.items.get, itemId ? { id: itemId } : 'skip'); // Conditional

if (isPending) return <Skeleton />;
```

**NEVER use** `useQuery` or `usePaginatedQuery` directly

### Skeleton Loading with Convex

**ALWAYS use `WithSkeleton` + `placeholderData`** for consistent skeleton UI:

```typescript
import { WithSkeleton } from '@/components/ui/skeleton';

const { data, isLoading } = useAuthQuery(
  api.character.list,
  {},
  {
    placeholderData: {
      characters: [
        { _id: '1' as any, name: 'Character 1', description: 'Description text' },
        { _id: '2' as any, name: 'Character 2', description: 'Description text' },
      ],
    }
  }
);

return (
  <div>
    {data?.characters?.map((char, index) => (
      <WithSkeleton key={index} isLoading={isLoading}>
        <Card>
          <h3>{char.name}</h3>
          <p>{char.description}</p>
        </Card>
      </WithSkeleton>
    ))}
  </div>
);
```

**Rules:**

- NEVER use random values in mock data (causes hydration errors)
- Keep mock data properties alphabetically ordered
- Use static, predictable mock data matching expected structure
- Use index as key for mock data items when mapping
- DO use `as any` for `_id` or `id` fields in placeholderData (e.g., `_id: '1' as any`)

### Mutations

```typescript
import { usePublicMutation, useAuthMutation } from '@/lib/convex/hooks';

const createItem = usePublicMutation(api.items.create); // Don't destructure
const updateSettings = useAuthMutation(api.user.updateSettings);

// Option 1: toast.promise (with loading state)
toast.promise(updateSettings.mutateAsync({ name: 'New' }), {
  loading: 'Updating...',
  success: 'Updated!',
  error: (e) => e.data?.message ?? 'Failed',
});

// Option 2: callbacks (no loading toast)
const updateSettings = useAuthMutation(api.user.updateSettings, {
  onSuccess: () => toast.success('Updated!'),
  onError: () => toast.error('Failed'),
});

<Button disabled={updateSettings.isPending}>Save</Button>
```

### Pagination Hooks

```typescript
// React hooks: usePublicPaginatedQuery, useAuthPaginatedQuery (NEVER use `usePaginatedQuery` directly)
const { data, hasNextPage, isLoading, isFetchingNextPage, fetchNextPage } =
  usePublicPaginatedQuery(
    api.messages.list,
    { author: 'alice' }, // args (excluding paginationOpts)
    { initialNumItems: 10 }
  );
```

### Other Hooks

```typescript
// Actions
import { usePublicAction, useAuthAction } from '@/lib/convex/hooks';
const generateReport = usePublicAction(api.reports.generate);
const processData = useAuthAction(api.data.process);

// One-off queries
import { useConvex } from 'convex/react';
const convex = useConvex();
await convex.query(api.items.validate, { id });

// Auth hooks
import { useIsAuth, useCurrentUser } from '@/lib/convex/hooks';
const isAuth = useIsAuth();
const { isLoading, ...user } = useCurrentUser();
```

### Server-Side Auth (RSC)

```typescript
import {
  getSessionToken,
  getSessionUser,
  isAuth,
  isUnauth,
  fetchAuthQuery,
  fetchAuthQueryOrThrow,
} from '@/lib/convex/server';

// Get session token/user in server components
const token = await getSessionToken(); // Returns string | null
const user = await getSessionUser(); // Returns SessionUser & { token } | null

// Check auth status
if (await isAuth()) {
  /* authenticated */
}
if (await isUnauth()) {
  /* not authenticated */
}

// Fetch authenticated queries in server components
const data = await fetchAuthQuery(api.user.getData, { id: userId });
// Returns null if not authenticated

const data = await fetchAuthQueryOrThrow(api.user.getData, { id: userId });
// Throws error if not authenticated
```

### Auth Guards

**Server-side guards (RSC)**:

```typescript
import { authGuard, adminGuard } from '@/lib/convex/rsc';

// In server components/pages
await authGuard(); // Redirects to login if not authenticated
await adminGuard(); // Returns 404 if not admin
```

**Client-side guards (hooks)**:

```typescript
import { useAuthGuard, usePremiumGuard } from '@/lib/convex/hooks';

// Auth guard - shows login modal if not authenticated
const authGuard = useAuthGuard();
if (authGuard(() => console.info('authenticated'))) return; // Blocked

// Premium guards - shows subscription modal if not premium
const premiumGuard = usePremiumGuard();
if (premiumGuard()) return; // Blocked
```

## TypeScript Guidelines

```typescript
// Document IDs
type UserId = Id<'users'>; // Use Id<T> for document IDs
const userId = localStorage.getItem('id') as Id<'users'>; // Cast external IDs

// Return type inference (client-side)
import { FunctionReturnType } from 'convex/server';
type MyData = FunctionReturnType<typeof api.users.get>;

// ‚ùå NEVER use: Awaited<ReturnType<typeof api.function>>
```

## Function References

**Import:** `import { api, internal } from '@convex/_generated/api'`

- **Public:** `api.filename.functionName` (e.g., `api.users.create`)
- **Internal:** `internal.filename.functionName` (e.g., `internal.users.process`)
- **Nested:** `api.folder.file.function` (e.g., `api.messages.access.check`)

## Shared Code Organization

- **Shared helpers**: Import from `@convex/shared/filename` or `@convex/[modelName]Shared`
- **Import paths**:
  - From Next.js: `import { helper } from '@convex/shared/filename'`
  - Model-specific: `import { helper } from '@convex/characterShared'`
